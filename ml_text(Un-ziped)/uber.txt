import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
df = pd.read_csv('uber.csv')
df.head()
df.tail()
print(df.info())
print(df.describe())
df = df.drop(['Unnamed: 0', 'key', 'pickup_datetime'], axis=1)
df.dropna(inplace=True)
sns.boxplot(df['fare_amount'])
low = df['fare_amount'].quantile(0.05)
high =df['fare_amount'].quantile(0.95)

df = df[(df['fare_amount'] > low) & (df['fare_amount']<high)]

sns.boxplot(df['fare_amount'])
corr = df.corr()
sns.heatmap(corr, annot=True)
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score
import numpy as np
X = df.drop(['fare_amount'], axis=1)
y = df['fare_amount']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
def train_and_evaluate(model, X_train, X_test, y_train, y_test):
    model.fit(X_train, y_train)
    y_pred = model.predict(X_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)
    print(f"{model.__class__.__name__} - RMSE: {rmse:.4f}, R2: {r2:.4f}")
    return rmse, r2
train_and_evaluate(LinearRegression(), X_train, X_test, y_train, y_test)
train_and_evaluate(RandomForestRegressor(n_estimators=20, max_depth=10), X_train, X_test, y_train, y_test)
